import React from "react"
import styled from "styled-components"

import MoonUniqueId from "../../assets/moon_unique.svg"
import StarUniqueId from "../../assets/star_unique.svg"
import MoonGenericId_1 from "../../assets/moon_generic1.svg"
import StarGenericId_1 from "../../assets/star_generic1.svg"
import MoonGenericId_2 from "../../assets/moon_generic2.svg"
import StarGenericId_2 from "../../assets/star_generic2.svg"

const Container = styled.div`
  display: flex;
  justify-content: center;
  max-width: 900px;
  margin: 0 auto;
  > div {
    padding: 1em 2em;
    flex-grow: 1;
    flex-basis: 5em;
    pre {
      background-color: hsla(0, 0%, 1000%, 0.5);
      padding: 1em;
      margin: 0.4em 0rem;
    }
    > pre {
      font-size: 0.75em;
      display: inline-block;
    }
    > h1 {
      background-color: hsla(0, 0%, 10%, 0.7);
      color: hsla(0, 0%, 100%, 1);
      display: inline-block;
      padding: 0 1ch;
    }
    > h2 {
      background-color: hsla(0, 0%, 100%, 0.7);
      /* padding: 0 1ch; */
      padding: 0 1.2rem;
    }
    > h3 {
      background-color: hsla(0, 0%, 100%, 0.4);
      padding: 0 1.2rem;
    }
    ul {
      list-style-type: none;
      padding: 0;
      margin: 0;
      text-align: left;
      display: inline-block;
      li {
        padding-left: 1rem;
        text-indent: -0.7rem;
      }
      li.ok::before {
        content: "✅ ";
      }
      li.fail::before {
        content: "❌ ";
      }
    }
    p,
    svg {
      margin: 0.4em 1.2rem;
    }
    p {
      vertical-align: top;
      /* display: inline-block; */
    }
    > svg {
      border-radius: 1em;
      width: 5em;
    }
  }
  > div:first-child {
    text-align: right;
    background-color: hsl(349, 100%, 90%);
    svg {
      float: left;
    }
    > div {
      text-align: left;
      float: left;
    }
  }
  > div:nth-child(2) {
    text-align: left;
    background-color: hsl(180, 96%, 80%);
    svg {
      float: right;
    }
    > div {
      text-align: right;
      float: right;
    }
  }
  &:nth-child(3n + 1) {
    > div:first-child {
      background-color: hsl(180, 96%, 80%);
    }
    > div:nth-child(2) {
      background-color: hsl(349, 100%, 90%);
    }
  }
`

const IndexPage = () => (
  <>
    <Container>
      <div>
        <h1>The Issue</h1>
        <p>SVG uses ID props to apply gradients and clip paths.</p>
        <p>
          Check{" "}
          <a href="https://github.com/strangehill/svgClashingIds">
            the repo for this site
          </a>{" "}
          to see the problem.
        </p>
      </div>
      <div>
        <p>
          When these IDs are generated by some popular vector image applications
          like Sketch or Illustrator, they tend to follow the same naming
          formulas for every document and you're likely to end up with generic
          IDs repeatedly used across multiple elements. Browsers respond
          differently to this misuse of the ID attributes.
        </p>
      </div>
    </Container>
    <Container>
      <div>
        <h2>crescent moon</h2>
        <MoonUniqueId />
        <p>
          clip path <br />
          w/ unique id
        </p>
        <pre>&lt;clipPath id="crescent"&gt;</pre>
        <pre>&lt;circle clip-path="url(#crescent)"&gt;</pre>
        <ul>
          <li className="ok"> on Chrome: ok</li>
          <li className="ok"> on Firefox: ok</li>
          <li className="ok"> on iOS WebKit: ok</li>
        </ul>
      </div>
      <div>
        <h2>star</h2>
        <StarUniqueId />
        <p>
          gradient <br />
          w/ unique id
        </p>
        <pre>
          &lt;Linear Gradient <br />
          id="warm_glow_gradient"&gt;
        </pre>
        <pre>&lt;Polygon fill="url(#warm_glow_gradient)"&gt;</pre>
        <ul>
          <li className="ok"> on Chrome: ok</li>
          <li className="ok"> on Firefox: ok</li>
          <li className="ok"> on iOS WebKit: ok</li>
        </ul>
      </div>
    </Container>
    <Container>
      <div>
        <h3>crescent moon first</h3>
        <MoonGenericId_1 />
        <p>w/ generic id 1</p>
        <pre>&lt;clipPath id="generic1"&gt;</pre>
        <pre>&lt;circle clip-path="url(#generic1)"&gt;</pre>
        <ul>
          <li className="ok"> on Chrome: ok</li>
          <li className="ok"> on Firefox: ok</li>
          <li className="fail"> on iOS WebKit: fail, no clipping applied.</li>
        </ul>
      </div>
      <div>
        <h3>star second</h3>
        <StarGenericId_1 />
        <p>w/ generic id 1</p>
        <pre>&lt;Linear Gradient id="generic1"&gt;</pre>
        <pre>&lt;Polygon fill="url(#generic1)"&gt;</pre>
        <ul>
          <li className="fail"> on Chrome: fail, no fill applied.</li>
          <li className="fail"> on Firefox : fail, no fill applied.</li>
          <li className="ok"> on iOS WebKit: ok</li>
        </ul>
      </div>
    </Container>
    <Container>
      <div>
        <h3>star first</h3>
        <StarGenericId_2 />
        <p>w/ generic id 2</p>
        <pre>&lt;Linear Gradient id="generic2"&gt;</pre>
        <pre>&lt;Polygon fill="url(#generic2)"&gt;</pre>
        <ul>
          <li className="ok"> on Chrome: ok</li>
          <li className="ok"> on Firefox: ok</li>
          <li className="fail"> on iOS WebKit: fail, no fill applied.</li>
        </ul>
      </div>
      <div>
        <h3>crescent moon second</h3>
        <br />
        <MoonGenericId_2 />
        <p>w/ generic id 2</p>
        <pre>&lt;clipPath id="generic1"&gt;</pre>
        <pre>&lt;circle clip-path="url(#generic2)"&gt;</pre>
        <ul>
          <li className="fail"> on Chrome: fail, no clipping applied.</li>
          <li className="fail">
            {" "}
            on Firefox: fail, underlying image not visible at all (clipping
            applied wrong?)
          </li>
          <li className="ok"> on iOS WebKit: ok</li>
        </ul>
      </div>
    </Container>
    <Container>
      <div>
        <h2>The Proposed Solution</h2>
        <p>
          prefix your ids with a unique identifier during the build process,
          whether a hash or filename
        </p>
      </div>
      <div>
        <p>
          That's what the{" "}
          <a href="https://github.com/jhamlet/svg-react-loader#query-params">
            {" "}
            React SVG Loader{" "}
          </a>
          offers us, by adding parameters in the plugin configuration, like:
          <pre>classIdPrefix: '[name]-[hash:8]__'</pre>
          as illustrated among other{" "}
          <a href="https://github.com/jhamlet/svg-react-loader#query-params">
            available query parameters
          </a>{" "}
          in the SVG to React Loader documentation,
          <br />
          or like:
          <pre>classIdPrefix: true</pre>
          <a href="https://www.reddit.com/r/vuejs/comments/ajxuyy/importing_multiple_inline_svgs_results_in_color/">
            as reported here for a non-Gatsby project.
          </a>
        </p>
        <p>
          The plugin should be usable in Gatsby with
          <a href="https://github.com/jacobmischka/gatsby-plugin-react-svg">
            {" "}
            Gatsby Plugin React SVG
          </a>
          , but while the plugin works fine for its primary purpose of allowing
          me to inline my svgs, and I've succesfully tested the use of some of
          the query parameters in the documentation (like adding a className or
          a title)... I can't get classIdPrefix to work.
        </p>
        <p>
          Given there's a pull request pending at the svg-react-loader project
          for prefixing ID names, it's also possible that I've misunderstood the
          purpose of `classIdPrefix`.{" "}
          <span role="img" aria-label="shrug">
            🤷
          </span>
        </p>
      </div>
    </Container>
  </>
)

export default IndexPage
